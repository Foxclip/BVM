# Mul
#     Add
#         Add
#             Inp 0
#             Inp 1
#         Inp 2
#     Add
#         Inp 0
#         Inp 2 # Inp 2
# Mul
#    55
#    87

# Cpy
# Add
#     1
#     2

# Mul
#     Cpy -1
#     Add 2 3

# Mul
#     Cpy -2 0
#     Add 2 3

# Mul
#     3
#     Add
#         2
#         3

# infinite loop with parallel execution
# Cpy 2
# Cpy -2

# for loop attempt
# 0
# Node
#     Cpy
#         -1
#         8
#     Node
#         Add
#             Cpy
#                 -6
#                 0
#             1
#         If
#             Cmp
#                 Cpy
#                     -3
#                     10
#             Del
#                 2


# node test
# Node
#     Add
#         2
#         3
#     Del
#         0

# del test
# Add
#     2
#     3
# Del
#     0
# Mul
#     5
#     5

# del test
# Node
#     Add
#         1
#         -1
#     1
# 2
# 3
# Del
#     -5
# 4
# 5
# Del
#     -1
# 6
# 7
# Del
#     0
# 8
# 9
# Del
#     1
# 10
# 11
# Del
#     3
# 12
# 13
# 14
# 15

# cpy test
# 5
# Cpy
#     -1
#     4
# 6
# 7

# label test
# Add :AddLabel
#     AddLabel
#     3

# label test
# 0
# 1
# 2
# 3
# 4 :DelThis
# 5 :CpyThis
# 6
# Del
#     DelThis
# 7
# Cpy
#     CpyThis
#     -2
# 8
# 9

# cmp test
# If
#     Cmp
#         Add
#             2
#             3
#         6
#     Add
#         2
#         3
#     Add
#         5
#         6

# for loop attempt
# 0
# Node
#     Cpy
#         -2
#         11
#     Cpy
#         -1
#         9
#     Add
#         Cpy
#             -4
#             0
#         1

# list test
# list
#     end
# list
#     list
#         0
#         add
#             11
#             22
#         2
#         list
#             55
#             66
#             77
#             end
#         3
#         4
#         end
#     list
#         end
#     list
#         1
#         end
#     end
# list
#     end

# for loop
# 0
# list
#     cpy
#         -1
#         19
#     add
#         cpy
#             -3
#             0
#         1
#     if
#         cmp
#             cpy
#                 -3
#                 0
#             10
#         del
#             3
#         del
#             0
#     end

# new ops test
# sub
#     10
#     3
# div
#     10
#     3
# mod
#     10
#     3
# pow
#     10
#     3

# shifting pointers
# zero: 0
# 1
# cpy
#     zero
#     dst2
# 2
# cpy
#     ten
#     eight
# three: 3
# del
#     three
# 4
# 5
# six: 6
# cpy
#     zero
#     0
# cpy
#     six
#     0
# 7
# eight: 8
# 9
# ten: 10
# 11
# cpy
#     zero
#     dst2: dst2

# 0 :zero
# cpy
#     zero
#     dst
# 1 :dst
# 2
# 3
# 4 :four
# cpy
#     four
#     nine
# 5
# 6
# 7
# 8
# 9 :nine
# 10

# 0 :zero
# cpy
#     five
#     0
# 2
# cpy
#     zero
#     0
# 4
# 5 :five

# end file label test
# cpy
#     zero
#     endf
# zero: 0
# 1
# 2
# 3
# endf:

# for loop with new labels
# list
#     cur: 0
#     lst: list
#         cpy
#             lst
#             end2
#         inc: add
#                 cpy
#                     cur
#                     0
#                 1
#         if
#             cmp
#                 cpy
#                     inc
#                     0
#                 10
#             del
#                 add
#                     end1
#                     1
#             del
#                 0
#         end1: end
#     end2: end

# p instruction inserting test
# rec0: rec0
# zero: 0
# p
#     1
# 1
# zero
# rec1: rec1
# somelabel
# 2
# three: 3
# rec2: rec2
# 4
# p
#     2
# somelabel: three
# rec3: rec3

# pointer type test
# begin:
# endp
# p
#     1
# 5
# endp2
# 6
# endp: 7
# 8
# endp2: 9
# 10

# pointer shift test
# add
#     p
#         2
#     1
# 5
# 6
# 7
# 8
# 9

# another pointer shift test
# six
# list
#     5
#     6
#     7
#     six   
#     end
# 5
# six: 6
# 7

# if pointer shift test
if
    add
        0
        1
    list
        six
        eight
        end
    list
        six
        eight
        nine
        end
5
six: 6
7
eight: 8
nine: 9
